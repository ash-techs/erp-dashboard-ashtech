generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  DECLINED
  EXPIRED

  @@map("quote_status")
}

enum InvoiceStatus {
  DRAFT
  PENDING
  UNPAID
  OVERDUE
  PARTIALLY_PAID
  PAID

  @@map("invoice_status")
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER

  @@map("transaction_type")
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED

  @@map("transaction_status")
}

enum TransactionCategory {
  OFFICE_SUPPLIES
  MARKETING
  TRAVEL
  UTILITIES
  SALARIES

  @@map("transaction_category")
}

enum PaymentMode {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  CHECK

  @@map("payment_mode")
}

enum PaymentStatus {
  RECEIVED
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED

  @@map("payment_status")
}

enum Discount {
  NO_DISCOUNT
  FIVE_PERCENT
  TEN_PERCENT
  FIFTEEN_PERCENT

  @@map("discount_per")
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  phone     String?
  address   String?
  companyId String?
  company   Company?  @relation(fields: [companyId], references: [id])
  invoices  Invoice[]
  payments  Payment[]
  sales     Sale[]
  orders    Order[]
  quotes    Quote[]

  @@map("customers")
}

model User {
  id               Int             @id @default(autoincrement())
  name             String
  username         String          @unique
  email            String          @unique
  role             String          @default("User")
  status           String          @default("Active")
  userId           String          @unique @map("user_id")
  currentChallenge String?         @map("current_challenge")
  // Relationships
  authenticators   Authenticator[]
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt

  @@map("users")
}

model Authenticator {
  id                  Int      @id @default(autoincrement())
  userId              Int      @map("user_id")
  credentialId        String   @unique @map("credential_id")
  credentialPublicKey String   @map("credential_public_key")
  signCount           Int      @default(0) @map("sign_count")
  aaguid              String?
  createdAt           DateTime @default(now()) @map("created_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

model Company {
  id           String        @id @default(cuid())
  name         String
  contact      String
  country      String
  phone        String
  email        String        @unique
  website      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  customers    Customer[]
  invoices     Invoice[]
  payments     Payment[]
  sales        Sale[]
  orders       Order[]
  quotes       Quote[]
  transactions Transaction[]

  @@map("companies")
}

model Invoice {
  id         Int           @id @default(autoincrement())
  number     String        @unique
  client     Customer      @relation(fields: [customerId], references: [id])
  customerId Int
  date       DateTime
  expireDate DateTime
  year       Int
  currency   String        @default("PKR")
  status     InvoiceStatus @default(DRAFT)
  paid       Float         @default(0)
  note       String?
  tax        Float?        @default(0)
  createdBy  String        @default("Admin")
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  items      InvoiceItem[]

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  @@map("invoices")
}

model InvoiceItem {
  id          Int     @id @default(autoincrement())
  item        String
  description String?
  quantity    Float
  price       Float
  invoiceId   Int
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Product {
  id          Int     @id @default(autoincrement())
  sku         String  @unique
  image       String?
  name        String
  price       Float
  quantity    Int
  description String?

  sales  Sale[]
  orders Order[]

  @@map("products")
}

model Sale {
  id         String   @id @default(cuid())
  saleId     String   @unique
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  date       DateTime
  product    Product  @relation(fields: [productId], references: [id])

  companyId     String?
  company       Company?    @relation(fields: [companyId], references: [id])
  productId     Int
  quantity      Float
  unitPrice     Float
  discount      Discount    @default(NO_DISCOUNT)
  amount        Float
  paymentMethod PaymentMode @default(CASH)
  notes         String?
  createdBy     String      @default("Admin")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("sales")
}

model Transaction {
  id              String              @id @default(cuid())
  type            TransactionType
  amount          Float
  bank            String
  checkNumber     String?
  vendor          Company             @relation(fields: [companyId], references: [id])
  companyId       String
  status          TransactionStatus   @default(PENDING)
  category        TransactionCategory
  date            DateTime
  receivedPayment Float               @default(0)
  description     String?
  createdBy       String              @default("Admin")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@map("transactions")
}

model Payment {
  id                 String        @id @default(cuid())
  receiptNumber      String        @unique
  client             Customer      @relation(fields: [customerId], references: [id])
  customerId         Int
  amount             Float
  date               DateTime
  number             String
  transactionDate    DateTime
  paymentMode        PaymentMode
  paymentTransaction String?
  status             PaymentStatus @default(RECEIVED)

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  notes     String?
  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

model Employee {
  id         Int      @id @default(autoincrement())
  name       String
  employeeId String   @unique @map("employee_id")
  department String
  position   String
  salary     Float
  hireDate   String   @map("hire_date")
  email      String
  website    String
  status     String   @default("Active") // "Active" or "Inactive"
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("employees")
}

model Order {
  id         Int      @id @default(autoincrement())
  number     String   @unique
  quantity   Int
  price      Float
  discount   Float
  total      Float
  status     String
  phone      String
  state      String
  city       String
  note       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId Int
  productId  Int
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
}

model Quote {
  id         String   @id @default(cuid())
  number     String   @unique
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId Int

  companyId  String?
  company    Company?    @relation(fields: [companyId], references: [id])
  date       DateTime
  expireDate DateTime
  year       String
  currency   String      @default("PKR")
  status     QuoteStatus @default(DRAFT)
  paid       Float       @default(0)
  note       String?
  tax        Float?      @default(0)
  createdBy  String      @default("Admin")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  items QuoteItem[]

  @@map("quotes")
}

model QuoteItem {
  id          String @id @default(cuid())
  item        String
  description String @default("")
  quantity    Float
  price       Float

  quoteId String
  quote   Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}
